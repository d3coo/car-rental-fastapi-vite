name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'
  PNPM_VERSION: '10'

jobs:
  # Job to detect changes and set up matrix
  changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            backend:
              - 'apps/backend/**'
              - 'packages/**'
              - 'pnpm-lock.yaml'
              - '.github/workflows/**'
            frontend:
              - 'apps/frontend/**'
              - 'packages/**'
              - 'pnpm-lock.yaml'
              - '.github/workflows/**'

  # Backend testing and linting
  backend:
    needs: changes
    if: ${{ needs.changes.outputs.backend == 'true' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./apps/backend

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ./apps/backend/venv
          key: ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-${{ hashFiles('apps/backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-

      - name: Create virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip

      - name: Install dependencies
        run: |
          source venv/bin/activate
          pip install -r requirements.txt

      - name: Lint with flake8
        run: |
          source venv/bin/activate
          flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

      - name: Format check with black
        run: |
          source venv/bin/activate
          black --check --diff app/

      - name: Import sort check with isort
        run: |
          source venv/bin/activate
          isort --check-only --diff app/

      - name: Type check with mypy
        run: |
          source venv/bin/activate
          mypy app/ || true  # Don't fail on mypy errors initially

      - name: Test with pytest
        run: |
          source venv/bin/activate
          pytest tests/ -v --cov=app --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./apps/backend/coverage.xml
          flags: backend
          name: backend-coverage

  # Frontend testing and linting
  frontend:
    needs: changes
    if: ${{ needs.changes.outputs.frontend == 'true' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint frontend
        run: pnpm --filter frontend lint

      - name: Type check frontend
        run: pnpm --filter frontend type-check

      - name: Test frontend
        run: pnpm --filter frontend test --coverage

      - name: Upload frontend coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./apps/frontend/coverage/coverage-final.json
          flags: frontend
          name: frontend-coverage

  # Build job (runs after tests pass)
  build:
    needs: [changes, backend, frontend]
    if: always() && (needs.backend.result == 'success' || needs.backend.result == 'skipped') && (needs.frontend.result == 'success' || needs.frontend.result == 'skipped')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build frontend
        if: ${{ needs.changes.outputs.frontend == 'true' }}
        run: pnpm --filter frontend build

      - name: Set up Python (for backend build)
        if: ${{ needs.changes.outputs.backend == 'true' }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Build backend
        if: ${{ needs.changes.outputs.backend == 'true' }}
        working-directory: ./apps/backend
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

  # Notification job
  notify:
    needs: [build]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Notify success
        if: ${{ needs.build.result == 'success' }}
        run: echo "✅ All checks passed! Ready to merge."

      - name: Notify failure
        if: ${{ needs.build.result == 'failure' }}
        run: |
          echo "❌ Some checks failed. Please review the logs."
          exit 1